@using XX_PhotoPrint.Service
@using System.Web.Script.Serialization
@{
	Layout = null;

	var js = new JavaScriptSerializer();

	var req = new Req();
	string account = req.String("Account", false, "未输入账号");
	string auth = req.String("Auth", false, "未输入授权");
	string password = req.String("Password", false, "未输入密码");
	string newPassword = req.String("NewPassword", false, "未输入新密码");

	if (req.HasError)
	{
		Output.Write(js.Serialize(new { success = false, msg = req.FirstError, errors = req.GetErrors() }));
		return;
	}

	auth = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(auth, "md5");
	string sAuth = UserService.GetAuth(account);
	if (!auth.Equals(sAuth, StringComparison.OrdinalIgnoreCase))
	{
		Output.Write(js.Serialize(new { success = false, msg = "授权错误" }));
		return;
	}

	int uid = UserService.GetUserID(account);

	var pwd = SQL.QueryScalar<string>("select Password from Users where Account=@p0", account);
	if (pwd == null)
	{
		Output.Write(js.Serialize(new { success = false, msg = "该账号不存在" }));
		return;
	}

	password = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(password, "md5");
	if (!pwd.Equals(password, StringComparison.OrdinalIgnoreCase))
	{
		Output.Write(js.Serialize(new { success = false, msg = "密码错误" }));
		return;
	}

	newPassword = System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(newPassword, "md5");

	SQL.Execute("update User set Password=@p0 where UserID=@p1", newPassword, uid);

	Output.Write(js.Serialize(new { success = true }));
	return;
}
